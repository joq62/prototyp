%%% -------------------------------------------------------------------
%%% Author  : uabjle
%%% Description : dbase using dets 
%%%
%%% Created : 10 dec 2012
%%% -------------------------------------------------------------------
-module(a).

-define(DNS_INFO(Zone,ServiceId,IpAddr,Port,Time,Schedule),{Zone,ServiceId,IpAddr,Port,Time,Schedule}).

-define(DNS_INFO_ZONE(DnsInfo),element(1,hd([DnsInfo]))).
-define(DNS_INFO_SERVICE(DnsInfo),element(2,hd([DnsInfo]))).
-define(DNS_INFO_IPADDR(DnsInfo),element(3,hd([DnsInfo]))).
-define(DNS_INFO_PORT(DnsInfo),element(4,hd([DnsInfo]))).
-define(DNS_INFO_TIME(DnsInfo),element(5,hd([DnsInfo]))).
-define(DNS_INFO_SCHEDULE(DnsInfo),element(6,hd([DnsInfo]))).

-define(DNS_TABLE,dns_table).
%% --------------------------------------------------------------------
%% Include files
%% --------------------------------------------------------------------
%%  -include("").
%% --------------------------------------------------------------------
%% External exports
-compile(export_all).



%% ====================================================================
%% External functions
%% ====================================================================
s()->
    init(),
    b().

b()->
    io:format("all services, all info  on node zone_a ~p~n",[ets:lookup(dnsbag,"zone_a")]),
    io:format("all services , ip_addr and port ~p~n",[ets:match(dnsbag,{'_','$2','$3','$4','_','_'})]),
    io:format("all services , time_stamp ~p~n",[ets:match(dnsbag,{'$10','$11','_','_','$12','_'})]),
    io:format("whole table  ~p~n",[ets:match(dnsbag,'$1')]),

    % remove old >125 
    All=ets:match(dnsbag,'$1'),
    Keep=[{Zone,Service,IpAddr,Port,Time,Schedule}||[{Zone,Service,IpAddr,Port,Time,Schedule}]<-All,
						 Time<150],
%    Remove=[{Zone,Service,IpAddr,Port,Time,Schedule}||[{Zone,Service,IpAddr,Port,Time,Schedule}]<-All,
%					   Time>150],
    io:format("Keep  ~p~n",[Keep]),
%   io:format("Remove  ~p~n",[Remove]),
 %   [ets:delete_object(dnsbag,X)||X<-Remove],
    
    remove_expired(150),
    io:format("reduced tabel table ~p~n",[ets:match(dnsbag,'$1')]),

    io:format("sd zone_c,service_1 ~p~n",[dns("zone_c","service_1")]),
    [{"80.216.3.159",60003}]=dns("zone_c","service_1"),
    []=dns("zone_c","service_2"),

    [{"80.216.3.159",60003},
     {"80.216.3.159",60001},
     {"80.216.3.159",60002}]=dns("service_1"),
    io:format("sd service_1 ~p~n",[dns("service_1")]),

    % update - new
    New={"zone_a","service_3","70.216.3.159",60002,200,na},
    update_dns(New),
    io:format("updated with New table ~p~n",[ets:match(dnsbag,'$1')]),
    
    % update - existing
    A20={"zone_b","service_1","80.216.3.159",60002,45,na}, 
    update_dns(A20),
    io:format("updated with a20 table ~p~n",[ets:match(dnsbag,'$1')]),    

    case ets:info(dnsbag) of
	undefined->
	    io:format("ets:info dnsbag 1 ~p~n",[undefined]);
	_->
	    io:format("delete dnsbag 1 ~p~n",[ets:delete(dnsbag)])
    end,	   
    case ets:info(dnsbag) of
	undefined->
	    io:format("ets:info dnsbag 2 ~p~n",[undefined]);
	_->
	    io:format("delete dnsbag 1 ~p~n",[ets:delete(dnsbag)])
    end, 
    ok.






%    {time_stamp="not_initiaded_time_stamp",    % un_loaded, started
%	   zone ="zone not initiaded",
%	   service_id = "not_initiaded_service_id",
%	   ip_addr="not_initiaded_ip_addr",
%	   port="not_initiaded_port",
%	   schedule_info="not used"
%	 }

init()->
    dnsbag=ets:new(dnsbag,[bag,named_table]),
    A1={"zone_a","service_1","80.216.3.159",60001,120,na},   
    A2={"zone_b","service_1","80.216.3.159",60002,120,na}, 
    A3={"zone_c","service_1","80.216.3.159",60003,130,na}, 
    B1={"zone_a","service_2","70.216.3.159",60001,120,na}, 
    B2={"zone_z","service_2","70.216.3.159",60002,200,na}, 
    
    DnsList=[A1,A2,A3,B1,B2],
    [update_dns(Object)||Object<-DnsList],
    %ets:insert(dnsbag,A1),
    %ets:insert(dnsbag,A2),
    %ets:insert(dnsbag,A3),
    %ets:insert(dnsbag,B1),
    %ets:insert(dnsbag,B2),
    ok.
    
%% --------------------------------------------------------------------
%% Function: 
%% Description:
%% Returns: non
%% --------------------------------------------------------------------

update_dns(Object)->
    {ZoneUpdate,ServiceIdUpdate,IpAddrUpdate,PortUpdate,TimeUpdate,ScheduleUpdate}=Object,
    L=ets:match(dnsbag,'$1'),    
    L1=[{ZoneUpdate,ServiceIdUpdate,IpAddrUpdate,PortUpdate,TimeUpdate,ScheduleUpdate}||[{Zone,ServiceId,_,_,_,_}]<-L,
										       {ZoneUpdate,ServiceIdUpdate}=={Zone,ServiceId}],
    R=case L1 of
	  []->
	      ets:insert(dnsbag,Object);
	  [Remove] ->
	      ets:delete_object(dnsbag,Remove),
	      ets:insert(dnsbag,Object)
      end,
    R.


dns(ZoneWanted,ServiceIdWanted)->
    L=ets:lookup(dnsbag,ZoneWanted),
    R=[{IpAddr,Port}||{_,ServiceId,IpAddr,Port,_,_}<-L,
		      ServiceId=:=ServiceIdWanted],
    R.

dns(ServiceIdWanted)->
    L1=ets:match(dnsbag,{'_','$2','$3','$4','_','_'}),
    R=[{IpAddr,Port}||[ServiceId,IpAddr,Port]<-L1,
		      ServiceId=:=ServiceIdWanted],
    R.

remove_expired(ExpireTime)->
    All=ets:match(dnsbag,'$1'),
    Remove=[{Zone,Service,IpAddr,Port,Time,Schedule}||[{Zone,Service,IpAddr,Port,Time,Schedule}]<-All,
					   Time>ExpireTime],
    [ets:delete_object(dnsbag,X)||X<-Remove].
